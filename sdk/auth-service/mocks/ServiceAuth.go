// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth_service "github.com/mrapry/go-lib/sdk/auth-service"

	golibshared "github.com/mrapry/go-lib/golibshared"

	mock "github.com/stretchr/testify/mock"
)

// ServiceAuth is an autogenerated mock type for the ServiceAuth type
type ServiceAuth struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: ctx, payload
func (_m *ServiceAuth) GenerateToken(ctx context.Context, payload auth_service.GenerateTokenRequest) <-chan golibshared.Result {
	ret := _m.Called(ctx, payload)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.GenerateTokenRequest) <-chan golibshared.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// RefreshToken provides a mock function with given fields: ctx, payload
func (_m *ServiceAuth) RefreshToken(ctx context.Context, payload auth_service.TokenRequest) <-chan golibshared.Result {
	ret := _m.Called(ctx, payload)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.TokenRequest) <-chan golibshared.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// RevokeToken provides a mock function with given fields: ctx, payload
func (_m *ServiceAuth) RevokeToken(ctx context.Context, payload auth_service.TokenRequest) <-chan golibshared.Result {
	ret := _m.Called(ctx, payload)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.TokenRequest) <-chan golibshared.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, token
func (_m *ServiceAuth) Validate(ctx context.Context, token string) <-chan golibshared.Result {
	ret := _m.Called(ctx, token)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan golibshared.Result); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}
